p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
test <- classifyNMIBC(expr_TCGA)
View(test)
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
classifyNMIBC <- function(data) {
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
# 初始化结果矩阵
results <- t(apply(data, 1, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个centroid的相关性
correlations <- apply(centroids[, common_genes, drop = FALSE], 1, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- rownames(centroids)[which.max(correlations)]  # 确保分类是centroids的行名
# 找到次大相关性
second_max_correlation <- sort(correlations, decreasing = TRUE)[2]
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的P值
nearest_centroid <- centroids[classification, common_genes]  # 修正索引顺序
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 返回分类结果、相关性、归一化差值和P值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval,
max_correlation =max_correlation,
second_max_correlation=second_max_correlation
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value",
"max_correlation",
"second_max_correlation"
)
# 返回结果
return(results_df)
}
test <- classifyNMIBC(expr_TCGA)
sample_cluster <- list()
for (name in names(expr_NMIBC) ){
data <- expr_NMIBC[[name]]
result <- classifyNMIBC(data)
sample_cluster[[name]] <- result
}
sample_result <- do.call(rbind,sample_cluster)
classifyNMIBC <- function(data, cor.cut = 0.1) {
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
# 初始化结果矩阵
results <- t(apply(data, 1, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个centroid的相关性
correlations <- apply(centroids[, common_genes, drop = FALSE], 1, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- rownames(centroids)[which.max(correlations)]  # 确保分类是centroids的行名
# 如果 max_correlation 小于 cor.cut，则将 classification 设置为 NA
if (max_correlation < cor.cut) {
classification <- NA
}
# 找到次大相关性
second_max_correlation <- sort(correlations, decreasing = TRUE)[2]
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的P值
nearest_centroid <- centroids[classification, common_genes, drop = FALSE]
cor_pval <- if (!is.na(classification)) {
cor.test(sample, nearest_centroid)$p.value
} else {
NA
}
# 返回分类结果、相关性、归一化差值和P值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
expr_NMIBC <- list()
for (name in names(expr_matrices)){
data <- expr_matrices[[name]]
data <- as.data.frame(data)
data$sample <- rownames(data)
data <-  data[data$sample%in%sample_ID$Baylor_Lund.ID,]
data <- data[,-ncol(data)]
expr_NMIBC[[name]] <- data
}
sample_cluster <- list()
for (name in names(expr_NMIBC) ){
data <- expr_NMIBC[[name]]
result <- classifyNMIBC(data)
sample_cluster[[name]] <- result
}
classifyNMIBC <- function(data, cor.cut = 0) {
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
# 初始化结果矩阵
results <- t(apply(data, 1, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个centroid的相关性
correlations <- apply(centroids[, common_genes, drop = FALSE], 1, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- rownames(centroids)[which.max(correlations)]  # 确保分类是centroids的行名
# 找到次大相关性
sorted_correlations <- sort(correlations, decreasing = TRUE)
second_max_correlation <- ifelse(length(sorted_correlations) > 1, sorted_correlations[2], 0)
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的P值
nearest_centroid <- centroids[classification, common_genes, drop = FALSE]
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 如果 max_correlation 小于 cor.cut，则将 classification 设置为 NA
if (max_correlation < cor.cut) {
classification <- NA
}
# 返回分类结果、相关性、归一化差值和P值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
sample_cluster <- list()
for (name in names(expr_NMIBC) ){
data <- expr_NMIBC[[name]]
result <- classifyNMIBC(data)
sample_cluster[[name]] <- result
}
sample_result <- do.call(rbind,sample_cluster)
test <- classifyNMIBC(expr_TCGA)
classifyNMIBC <- function(data, cor.cut = 0) {
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
# 初始化结果矩阵
results <- t(apply(data, 1, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个centroid的相关性
correlations <- apply(centroids[, common_genes, drop = FALSE], 1, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- rownames(centroids)[which.max(correlations)]  # 确保分类是centroids的行名
# 找到次大相关性
sorted_correlations <- sort(correlations, decreasing = TRUE)
second_max_correlation <- ifelse(length(sorted_correlations) > 1, sorted_correlations[2], 0)
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的P值
nearest_centroid <- centroids[classification, common_genes, drop = FALSE]
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 返回分类结果、相关性、归一化差值和P值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
test <- classifyNMIBC(expr_TCGA)
classifyNMIBC <- function(data,cor.cut = 0) {
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
# 初始化结果矩阵
results <- t(apply(data, 1, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个centroid的相关性
correlations <- apply(centroids[, common_genes, drop = FALSE], 1, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- rownames(centroids)[which.max(correlations)]  # 确保分类是centroids的行名
# 找到次大相关性
second_max_correlation <- sort(correlations, decreasing = TRUE)[2]
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的P值
nearest_centroid <- centroids[classification, common_genes]  # 修正索引顺序
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 如果 max_correlation 小于 cor.cut，则将 classification 设置为 NA
if (max_correlation < cor.cut) {
classification <- NA
}
# 返回分类结果、相关性、归一化差值和P值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
test <- classifyNMIBC(expr_TCGA)
View(test)
classifyNMIBC <- function(data,cor.cut = 0.1) {
# 找到centroids和输入数据的共同基因
common_genes <- intersect(colnames(centroids), colnames(data))
# 初始化结果矩阵
results <- t(apply(data, 1, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个centroid的相关性
correlations <- apply(centroids[, common_genes, drop = FALSE], 1, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- rownames(centroids)[which.max(correlations)]  # 确保分类是centroids的行名
# 找到次大相关性
second_max_correlation <- sort(correlations, decreasing = TRUE)[2]
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的P值
nearest_centroid <- centroids[classification, common_genes]  # 修正索引顺序
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 如果 max_correlation 小于 cor.cut，则将 classification 设置为 NA
if (max_correlation < cor.cut) {
classification <- NA
}
# 返回分类结果、相关性、归一化差值和P值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
"correlation_to_consensus_cluster_1",
"correlation_to_consensus_cluster_2",
"correlation_to_consensus_cluster_3",
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
test <- classifyNMIBC(expr_TCGA)
sample_cluster <- list()
for (name in names(expr_NMIBC) ){
data <- expr_NMIBC[[name]]
result <- classifyNMIBC(data)
sample_cluster[[name]] <- result
}
sample_result <- do.call(rbind,sample_cluster)
View(sample_result)
####TCGA MIBC 数据 是否富含cluster 2 ####
#### 1,2,3,三群的数量分别为119,78,231 ####
#### 从生存分析结果来看，三群在一起，P=0.071，群2最差，13分不开 ####
#### 1,2 单独的生存分析 P=0.038 ####
#### 2,3 单独的生存分析 P=0.04  ####
expr_TCGA <-read.csv("D:/OneDrive - 中山大学/R_workplace/processed_data/TCGA-BLCAoutput_mRNA_lncRNA_expr/TCGA-BLCA_mrna_expr_fpkm.csv")
max(expr_TCGA[,-1])
rownames(expr_TCGA) <- expr_TCGA[,1]
expr_TCGA <- expr_TCGA[,-1]
expr_TCGA <- t(expr_TCGA)
View(expr_TCGA)
# pearson correlation
centroids <- readRDS("D:/OneDrive - 中山大学/R_workplace/MCL/dataset/model1/建模_centroid.RDS")
centroids <- t(centroids)
classifyNMIBC <- function(data, cor.cut = 0.1) {
# 找到 centroids 和输入数据的共同基因
common_genes <- intersect(rownames(centroids), rownames(data))
pearson_correlation <- function(x, y) {
cor(x, y, method = "pearson")
}
# 初始化结果矩阵
results <- t(apply(data[common_genes, , drop = FALSE], 2, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个 centroid 的相关性
correlations <- apply(centroids[common_genes, , drop = FALSE], 2, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- colnames(centroids)[which.max(correlations)]  # 确保分类是 centroids 的列名
# 找到次大相关性
second_max_correlation <- sort(correlations, decreasing = TRUE)[2]
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的 P 值
nearest_centroid <- centroids[common_genes, classification]  # 修正索引顺序
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 如果 max_correlation 小于 cor.cut，则将 classification 设置为 NA
if (max_correlation < cor.cut) {
classification <- NA
}
# 返回分类结果、相关性、归一化差值和 P 值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
paste0("correlation_to_consensus_cluster_", 1:(ncol(centroids))),
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
expr_TCGA <- t(expr_TCGA)
test <- classifyNMIBC(expr_TCGA)
View(test)
#### 给所有样本归类 ####
load("D:/OneDrive - 中山大学/R_workplace/MCL/dataset/progressed_data/expr_matrix.RData")
max(expr_dejong_A)
expr_matrices <- list(
expr_dejong_A = as.matrix(expr_dejong_A),
expr_dejong_B = as.matrix(expr_dejong_B),
expr_GSE120736 = as.matrix(expr_GSE120736),
expr_GSE128959 = as.matrix(expr_GSE128959),
expr_GSE13507 = as.matrix(expr_GSE13507),
expr_GSE154261_73 = as.matrix(expr_GSE154261_73),
expr_GSE154261_26 = as.matrix(expr_GSE154261_26),
expr_GSE163209 = as.matrix(expr_GSE163209),
expr_GSE31684 = as.matrix(expr_GSE31684),
expr_GSE32549 = as.matrix(expr_GSE32549),
expr_GSE48075 = as.matrix(expr_GSE48075),
expr_GSE83586 = as.matrix(expr_GSE83586),
expr_UROMOL = as.matrix(expr_UROMOL)
)
expr_matrices <- lapply(expr_matrices, t)
expr <- expr_matrices[["expr_dejong_A"]]
sample_ID <- readRDS("D:/OneDrive - 中山大学/R_workplace/MCL/dataset/progressed_data/cluster_result_NMIBC_2")
expr_NMIBC <- list()
for (name in names(expr_matrices)){
data <- expr_matrices[[name]]
data <- as.data.frame(data)
data$sample <- rownames(data)
data <-  data[data$sample%in%sample_ID$Baylor_Lund.ID,]
data <- data[,-ncol(data)]
expr_NMIBC[[name]] <- data
}
expr <- expr_NMIBC[["expr_dejong_A"]]
View(expr)
# 使用dejong_A作为示例数据
dejongA <- t(dejongA)
# 使用dejong_A作为示例数据
dejongA <- t(expr)
View(dejongA)
usethis::use_data(dejongA)
usethis::use_data(centroids)
classifyNMIBC <- function(data, cor.cut = 0.1) {
centroids <- NMIBCClassifier::centroids
# 找到 centroids 和输入数据的共同基因
common_genes <- intersect(rownames(centroids), rownames(data))
pearson_correlation <- function(x, y) {
cor(x, y, method = "pearson")
}
# 初始化结果矩阵
results <- t(apply(data[common_genes, , drop = FALSE], 2, function(sample) {
# 提取样本中共同基因的表达值
sample <- sample[common_genes]
# 计算样本与每个 centroid 的相关性
correlations <- apply(centroids[common_genes, , drop = FALSE], 2, pearson_correlation, y = sample)
# 找到相关性最高的分类
max_correlation <- max(correlations)
classification <- colnames(centroids)[which.max(correlations)]  # 确保分类是 centroids 的列名
# 找到次大相关性
second_max_correlation <- sort(correlations, decreasing = TRUE)[2]
# 计算归一化差值
normalized_difference <- (max_correlation - second_max_correlation) / max_correlation
# 计算最大相关类别的 P 值
nearest_centroid <- centroids[common_genes, classification]  # 修正索引顺序
cor_pval <- cor.test(sample, nearest_centroid)$p.value
# 如果 max_correlation 小于 cor.cut，则将 classification 设置为 NA
if (max_correlation < cor.cut) {
classification <- NA
}
# 返回分类结果、相关性、归一化差值和 P 值
c(
classification = classification,
correlations,
normalized_difference = normalized_difference,
p_value = cor_pval
)
}))
# 转换为数据框
results_df <- as.data.frame(results)
# 修改列名
colnames(results_df) <- c(
"consensus_cluster",
paste0("correlation_to_consensus_cluster_", 1:(ncol(centroids))),
"normalized_difference",
"p_value"
)
# 返回结果
return(results_df)
}
classifyNMIBC(dejongA, cor.cut = 0.1)
devtools::document()
devtools::check()
install.packages("styler")
styler::style_pkg()
# install.packages("lintr")
install.packages("lintr")
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_package(package, type = "Imports", min_version = NULL)
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
